# Makefile.in generated by automake 1.14.1 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2013 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

VPATH = @srcdir@
am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
target_triplet = @target@
bin_PROGRAMS = mauveAligner$(EXEEXT) mauveStatic$(EXEEXT) \
	scoreAlignment$(EXEEXT) uniqueMerCount$(EXEEXT) \
	toRawSequence$(EXEEXT) mfa2xmfa$(EXEEXT) \
	addUnalignedIntervals$(EXEEXT) toMultiFastA$(EXEEXT) \
	getAlignmentWindows$(EXEEXT) uniquifyTrees$(EXEEXT) \
	toGrimmFormat$(EXEEXT) mauveToXMFA$(EXEEXT) \
	stripGapColumns$(EXEEXT) progressiveMauve$(EXEEXT) \
	progressiveMauveStatic$(EXEEXT) extractBCITrees$(EXEEXT) \
	createBackboneMFA$(EXEEXT) repeatoire$(EXEEXT) \
	alignmentProjector$(EXEEXT) stripSubsetLCBs$(EXEEXT) \
	projectAndStrip$(EXEEXT) makeBadgerMatrix$(EXEEXT) \
	randomGeneSample$(EXEEXT) getOrthologList$(EXEEXT) \
	bbFilter$(EXEEXT) bbAnalyze$(EXEEXT) \
	backbone_global_to_local$(EXEEXT) xmfa2maf$(EXEEXT) \
	coordinateTranslate$(EXEEXT)
EXTRA_PROGRAMS = bbBreakOnGenes$(EXEEXT) mauveMpatrol$(EXEEXT) \
	mauveEfence$(EXEEXT) toGBKsequence$(EXEEXT) \
	multiToRawSequence$(EXEEXT) unalign$(EXEEXT) \
	makeMc4Matrix$(EXEEXT) multiEVD$(EXEEXT) evd$(EXEEXT) \
	scoreALU$(EXEEXT) calculateBackboneCoverage2$(EXEEXT) \
	sortContigs$(EXEEXT) countInPlaceInversions$(EXEEXT) \
	gappiness$(EXEEXT) joinAlignmentFiles$(EXEEXT) \
	extractBackbone2$(EXEEXT) pairCompare$(EXEEXT) \
	calculateCoverage$(EXEEXT) calculateBackboneCoverage$(EXEEXT) \
	extractBackbone$(EXEEXT) transposeCoordinates$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/Makefile.am \
	$(srcdir)/config.h.in $(top_srcdir)/config/depcomp
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_addUnalignedIntervals_OBJECTS = addUnalignedIntervals.$(OBJEXT)
addUnalignedIntervals_OBJECTS = $(am_addUnalignedIntervals_OBJECTS)
am__DEPENDENCIES_1 =
am__DEPENDENCIES_2 = $(am__DEPENDENCIES_1)
addUnalignedIntervals_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_alignmentProjector_OBJECTS = alignmentProjector.$(OBJEXT)
alignmentProjector_OBJECTS = $(am_alignmentProjector_OBJECTS)
alignmentProjector_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_backbone_global_to_local_OBJECTS =  \
	backbone_global_to_local.$(OBJEXT)
backbone_global_to_local_OBJECTS =  \
	$(am_backbone_global_to_local_OBJECTS)
backbone_global_to_local_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_bbAnalyze_OBJECTS = bbAnalyze.$(OBJEXT)
bbAnalyze_OBJECTS = $(am_bbAnalyze_OBJECTS)
bbAnalyze_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_bbBreakOnGenes_OBJECTS = bbBreakOnGenes.$(OBJEXT)
bbBreakOnGenes_OBJECTS = $(am_bbBreakOnGenes_OBJECTS)
bbBreakOnGenes_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_bbFilter_OBJECTS = bbFilter.$(OBJEXT)
bbFilter_OBJECTS = $(am_bbFilter_OBJECTS)
bbFilter_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_calculateBackboneCoverage_OBJECTS =  \
	calculateBackboneCoverage.$(OBJEXT)
calculateBackboneCoverage_OBJECTS =  \
	$(am_calculateBackboneCoverage_OBJECTS)
am_calculateBackboneCoverage2_OBJECTS =  \
	calculateBackboneCoverage2.$(OBJEXT)
calculateBackboneCoverage2_OBJECTS =  \
	$(am_calculateBackboneCoverage2_OBJECTS)
calculateBackboneCoverage2_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_calculateCoverage_OBJECTS = calculateCoverage.$(OBJEXT)
calculateCoverage_OBJECTS = $(am_calculateCoverage_OBJECTS)
am_coordinateTranslate_OBJECTS = coordinateTranslate.$(OBJEXT)
coordinateTranslate_OBJECTS = $(am_coordinateTranslate_OBJECTS)
coordinateTranslate_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_countInPlaceInversions_OBJECTS = countInPlaceInversions.$(OBJEXT)
countInPlaceInversions_OBJECTS = $(am_countInPlaceInversions_OBJECTS)
countInPlaceInversions_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_createBackboneMFA_OBJECTS = createBackboneMFA.$(OBJEXT)
createBackboneMFA_OBJECTS = $(am_createBackboneMFA_OBJECTS)
createBackboneMFA_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_evd_OBJECTS = evd.$(OBJEXT)
evd_OBJECTS = $(am_evd_OBJECTS)
evd_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_extractBCITrees_OBJECTS = extractBCITrees.$(OBJEXT)
extractBCITrees_OBJECTS = $(am_extractBCITrees_OBJECTS)
extractBCITrees_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_extractBackbone_OBJECTS = extractBackbone.$(OBJEXT)
extractBackbone_OBJECTS = $(am_extractBackbone_OBJECTS)
am_extractBackbone2_OBJECTS = extractBackbone2.$(OBJEXT)
extractBackbone2_OBJECTS = $(am_extractBackbone2_OBJECTS)
extractBackbone2_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_gappiness_OBJECTS = gappiness.$(OBJEXT)
gappiness_OBJECTS = $(am_gappiness_OBJECTS)
gappiness_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_getAlignmentWindows_OBJECTS = getAlignmentWindows.$(OBJEXT)
getAlignmentWindows_OBJECTS = $(am_getAlignmentWindows_OBJECTS)
getAlignmentWindows_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_getOrthologList_OBJECTS = getOrthologList.$(OBJEXT)
getOrthologList_OBJECTS = $(am_getOrthologList_OBJECTS)
getOrthologList_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_joinAlignmentFiles_OBJECTS = joinAlignmentFiles.$(OBJEXT)
joinAlignmentFiles_OBJECTS = $(am_joinAlignmentFiles_OBJECTS)
joinAlignmentFiles_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_makeBadgerMatrix_OBJECTS = makeBadgerMatrix.$(OBJEXT)
makeBadgerMatrix_OBJECTS = $(am_makeBadgerMatrix_OBJECTS)
makeBadgerMatrix_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_makeMc4Matrix_OBJECTS = makeMc4Matrix.$(OBJEXT)
makeMc4Matrix_OBJECTS = $(am_makeMc4Matrix_OBJECTS)
makeMc4Matrix_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_mauveAligner_OBJECTS = mauveAligner.$(OBJEXT)
mauveAligner_OBJECTS = $(am_mauveAligner_OBJECTS)
mauveAligner_LINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(mauveAligner_LDFLAGS) $(LDFLAGS) -o $@
am_mauveEfence_OBJECTS = mauveAligner.$(OBJEXT)
mauveEfence_OBJECTS = $(am_mauveEfence_OBJECTS)
am_mauveMpatrol_OBJECTS = mauveAligner.$(OBJEXT)
mauveMpatrol_OBJECTS = $(am_mauveMpatrol_OBJECTS)
mauveMpatrol_LDADD = $(LDADD)
mauveMpatrol_LINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(mauveMpatrol_LDFLAGS) $(LDFLAGS) -o $@
am_mauveStatic_OBJECTS = mauveAligner.$(OBJEXT)
mauveStatic_OBJECTS = $(am_mauveStatic_OBJECTS)
am_mauveToXMFA_OBJECTS = mauveToXMFA.$(OBJEXT)
mauveToXMFA_OBJECTS = $(am_mauveToXMFA_OBJECTS)
mauveToXMFA_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_mfa2xmfa_OBJECTS = mfa2xmfa.$(OBJEXT)
mfa2xmfa_OBJECTS = $(am_mfa2xmfa_OBJECTS)
am_multiEVD_OBJECTS = multiEVD.$(OBJEXT)
multiEVD_OBJECTS = $(am_multiEVD_OBJECTS)
multiEVD_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_multiToRawSequence_OBJECTS = multiToRawSequence.$(OBJEXT)
multiToRawSequence_OBJECTS = $(am_multiToRawSequence_OBJECTS)
am_pairCompare_OBJECTS = pairCompare.$(OBJEXT)
pairCompare_OBJECTS = $(am_pairCompare_OBJECTS)
pairCompare_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_progressiveMauve_OBJECTS = progressiveMauve.$(OBJEXT) \
	UniqueMatchFinder.$(OBJEXT)
progressiveMauve_OBJECTS = $(am_progressiveMauve_OBJECTS)
progressiveMauve_DEPENDENCIES = $(am__DEPENDENCIES_2)
progressiveMauve_LINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \
	$(progressiveMauve_LDFLAGS) $(LDFLAGS) -o $@
am_progressiveMauveStatic_OBJECTS = progressiveMauve.$(OBJEXT) \
	UniqueMatchFinder.$(OBJEXT)
progressiveMauveStatic_OBJECTS = $(am_progressiveMauveStatic_OBJECTS)
progressiveMauveStatic_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_projectAndStrip_OBJECTS = projectAndStrip.$(OBJEXT)
projectAndStrip_OBJECTS = $(am_projectAndStrip_OBJECTS)
projectAndStrip_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_randomGeneSample_OBJECTS = randomGeneSample.$(OBJEXT)
randomGeneSample_OBJECTS = $(am_randomGeneSample_OBJECTS)
randomGeneSample_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_repeatoire_OBJECTS = repeatoire.$(OBJEXT)
repeatoire_OBJECTS = $(am_repeatoire_OBJECTS)
repeatoire_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_scoreALU_OBJECTS = scoreALU.$(OBJEXT)
scoreALU_OBJECTS = $(am_scoreALU_OBJECTS)
scoreALU_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_scoreAlignment_OBJECTS = scoreAlignment.$(OBJEXT)
scoreAlignment_OBJECTS = $(am_scoreAlignment_OBJECTS)
am_sortContigs_OBJECTS = sortContigs.$(OBJEXT)
sortContigs_OBJECTS = $(am_sortContigs_OBJECTS)
sortContigs_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_stripGapColumns_OBJECTS = stripGapColumns.$(OBJEXT)
stripGapColumns_OBJECTS = $(am_stripGapColumns_OBJECTS)
stripGapColumns_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_stripSubsetLCBs_OBJECTS = stripSubsetLCBs.$(OBJEXT)
stripSubsetLCBs_OBJECTS = $(am_stripSubsetLCBs_OBJECTS)
stripSubsetLCBs_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_toGBKsequence_OBJECTS = toGBKsequence.$(OBJEXT)
toGBKsequence_OBJECTS = $(am_toGBKsequence_OBJECTS)
am_toGrimmFormat_OBJECTS = toGrimmFormat.$(OBJEXT)
toGrimmFormat_OBJECTS = $(am_toGrimmFormat_OBJECTS)
toGrimmFormat_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_toMultiFastA_OBJECTS = toMultiFastA.$(OBJEXT)
toMultiFastA_OBJECTS = $(am_toMultiFastA_OBJECTS)
toMultiFastA_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_toRawSequence_OBJECTS = toRawSequence.$(OBJEXT)
toRawSequence_OBJECTS = $(am_toRawSequence_OBJECTS)
am_transposeCoordinates_OBJECTS = transposeCoordinates.$(OBJEXT)
transposeCoordinates_OBJECTS = $(am_transposeCoordinates_OBJECTS)
am_unalign_OBJECTS = unalign.$(OBJEXT)
unalign_OBJECTS = $(am_unalign_OBJECTS)
am_uniqueMerCount_OBJECTS = uniqueMerCount.$(OBJEXT)
uniqueMerCount_OBJECTS = $(am_uniqueMerCount_OBJECTS)
am_uniquifyTrees_OBJECTS = uniquifyTrees.$(OBJEXT)
uniquifyTrees_OBJECTS = $(am_uniquifyTrees_OBJECTS)
uniquifyTrees_DEPENDENCIES = $(am__DEPENDENCIES_2)
am_xmfa2maf_OBJECTS = xmfa2maf.$(OBJEXT)
xmfa2maf_OBJECTS = $(am_xmfa2maf_OBJECTS)
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I.@am__isrc@
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_@AM_V@)
am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)
am__v_CC_0 = @echo "  CC      " $@;
am__v_CC_1 = 
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_@AM_V@)
am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
am__v_CCLD_0 = @echo "  CCLD    " $@;
am__v_CCLD_1 = 
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_@AM_V@)
am__v_CXX_ = $(am__v_CXX_@AM_DEFAULT_V@)
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
AM_V_CXXLD = $(am__v_CXXLD_@AM_V@)
am__v_CXXLD_ = $(am__v_CXXLD_@AM_DEFAULT_V@)
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(addUnalignedIntervals_SOURCES) \
	$(alignmentProjector_SOURCES) \
	$(backbone_global_to_local_SOURCES) $(bbAnalyze_SOURCES) \
	$(bbBreakOnGenes_SOURCES) $(bbFilter_SOURCES) \
	$(calculateBackboneCoverage_SOURCES) \
	$(EXTRA_calculateBackboneCoverage_SOURCES) \
	$(calculateBackboneCoverage2_SOURCES) \
	$(calculateCoverage_SOURCES) \
	$(EXTRA_calculateCoverage_SOURCES) \
	$(coordinateTranslate_SOURCES) \
	$(countInPlaceInversions_SOURCES) $(createBackboneMFA_SOURCES) \
	$(evd_SOURCES) $(extractBCITrees_SOURCES) \
	$(extractBackbone_SOURCES) $(EXTRA_extractBackbone_SOURCES) \
	$(extractBackbone2_SOURCES) $(gappiness_SOURCES) \
	$(getAlignmentWindows_SOURCES) $(getOrthologList_SOURCES) \
	$(joinAlignmentFiles_SOURCES) $(makeBadgerMatrix_SOURCES) \
	$(makeMc4Matrix_SOURCES) $(mauveAligner_SOURCES) \
	$(EXTRA_mauveAligner_SOURCES) $(mauveEfence_SOURCES) \
	$(EXTRA_mauveEfence_SOURCES) $(mauveMpatrol_SOURCES) \
	$(EXTRA_mauveMpatrol_SOURCES) $(mauveStatic_SOURCES) \
	$(EXTRA_mauveStatic_SOURCES) $(mauveToXMFA_SOURCES) \
	$(mfa2xmfa_SOURCES) $(EXTRA_mfa2xmfa_SOURCES) \
	$(multiEVD_SOURCES) $(multiToRawSequence_SOURCES) \
	$(EXTRA_multiToRawSequence_SOURCES) $(pairCompare_SOURCES) \
	$(progressiveMauve_SOURCES) $(progressiveMauveStatic_SOURCES) \
	$(projectAndStrip_SOURCES) $(randomGeneSample_SOURCES) \
	$(repeatoire_SOURCES) $(scoreALU_SOURCES) \
	$(scoreAlignment_SOURCES) $(EXTRA_scoreAlignment_SOURCES) \
	$(sortContigs_SOURCES) $(stripGapColumns_SOURCES) \
	$(stripSubsetLCBs_SOURCES) $(toGBKsequence_SOURCES) \
	$(EXTRA_toGBKsequence_SOURCES) $(toGrimmFormat_SOURCES) \
	$(toMultiFastA_SOURCES) $(toRawSequence_SOURCES) \
	$(EXTRA_toRawSequence_SOURCES) $(transposeCoordinates_SOURCES) \
	$(EXTRA_transposeCoordinates_SOURCES) $(unalign_SOURCES) \
	$(EXTRA_unalign_SOURCES) $(uniqueMerCount_SOURCES) \
	$(EXTRA_uniqueMerCount_SOURCES) $(uniquifyTrees_SOURCES) \
	$(xmfa2maf_SOURCES) $(EXTRA_xmfa2maf_SOURCES)
DIST_SOURCES = $(addUnalignedIntervals_SOURCES) \
	$(alignmentProjector_SOURCES) \
	$(backbone_global_to_local_SOURCES) $(bbAnalyze_SOURCES) \
	$(bbBreakOnGenes_SOURCES) $(bbFilter_SOURCES) \
	$(calculateBackboneCoverage_SOURCES) \
	$(EXTRA_calculateBackboneCoverage_SOURCES) \
	$(calculateBackboneCoverage2_SOURCES) \
	$(calculateCoverage_SOURCES) \
	$(EXTRA_calculateCoverage_SOURCES) \
	$(coordinateTranslate_SOURCES) \
	$(countInPlaceInversions_SOURCES) $(createBackboneMFA_SOURCES) \
	$(evd_SOURCES) $(extractBCITrees_SOURCES) \
	$(extractBackbone_SOURCES) $(EXTRA_extractBackbone_SOURCES) \
	$(extractBackbone2_SOURCES) $(gappiness_SOURCES) \
	$(getAlignmentWindows_SOURCES) $(getOrthologList_SOURCES) \
	$(joinAlignmentFiles_SOURCES) $(makeBadgerMatrix_SOURCES) \
	$(makeMc4Matrix_SOURCES) $(mauveAligner_SOURCES) \
	$(EXTRA_mauveAligner_SOURCES) $(mauveEfence_SOURCES) \
	$(EXTRA_mauveEfence_SOURCES) $(mauveMpatrol_SOURCES) \
	$(EXTRA_mauveMpatrol_SOURCES) $(mauveStatic_SOURCES) \
	$(EXTRA_mauveStatic_SOURCES) $(mauveToXMFA_SOURCES) \
	$(mfa2xmfa_SOURCES) $(EXTRA_mfa2xmfa_SOURCES) \
	$(multiEVD_SOURCES) $(multiToRawSequence_SOURCES) \
	$(EXTRA_multiToRawSequence_SOURCES) $(pairCompare_SOURCES) \
	$(progressiveMauve_SOURCES) $(progressiveMauveStatic_SOURCES) \
	$(projectAndStrip_SOURCES) $(randomGeneSample_SOURCES) \
	$(repeatoire_SOURCES) $(scoreALU_SOURCES) \
	$(scoreAlignment_SOURCES) $(EXTRA_scoreAlignment_SOURCES) \
	$(sortContigs_SOURCES) $(stripGapColumns_SOURCES) \
	$(stripSubsetLCBs_SOURCES) $(toGBKsequence_SOURCES) \
	$(EXTRA_toGBKsequence_SOURCES) $(toGrimmFormat_SOURCES) \
	$(toMultiFastA_SOURCES) $(toRawSequence_SOURCES) \
	$(EXTRA_toRawSequence_SOURCES) $(transposeCoordinates_SOURCES) \
	$(EXTRA_transposeCoordinates_SOURCES) $(unalign_SOURCES) \
	$(EXTRA_unalign_SOURCES) $(uniqueMerCount_SOURCES) \
	$(EXTRA_uniqueMerCount_SOURCES) $(uniquifyTrees_SOURCES) \
	$(xmfa2maf_SOURCES) $(EXTRA_xmfa2maf_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \
	$(LISP)config.h.in
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DEPS_CFLAGS = @DEPS_CFLAGS@
DEPS_LIBS = @DEPS_LIBS@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
GETOPT_LONG_SYSTEM = @GETOPT_LONG_SYSTEM@
GREP = @GREP@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL_VERSION_INFO = @LIBTOOL_VERSION_INFO@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PKG_CONFIG = @PKG_CONFIG@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STATIC_FLAG = @STATIC_FLAG@
STRIP = @STRIP@
VERSION = @VERSION@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target = @target@
target_alias = @target_alias@
target_cpu = @target_cpu@
target_os = @target_os@
target_vendor = @target_vendor@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
@DEBUG_TRUE@D_CXXFLAGS = -Wall -g -DCOMMAND_LINE -D__GNDEBUG__ 
@DEBUG_FALSE@P_CXXFLAGS = -DCOMMAND_LINE
OPTIMIZATION = -O2 -funroll-loops -fomit-frame-pointer -ftree-vectorize 
AM_CXXFLAGS = $(OPTIMIZATION) $(D_CXXFLAGS) $(P_CXXFLAGS) 
AM_LDFLAGS = @STATIC_FLAG@
LIBRARY_CL = $(DEPS_LIBS) 
#AM_LDADD = $(DEPS_LIBS) 
INCLUDES = @DEPS_CFLAGS@ 
mauveAligner_SOURCES = mauveAligner.cpp mauveAligner.h
mauveAligner_LDFLAGS = $(OPTIMIZATION)  
mauveAligner_LDADD = $(DEPS_LIBS) 
EXTRA_mauveAligner_SOURCES = getopt.c getopt.h getopt1.c
mauveAligner_DEPENDENCIES = @GETOPT_LONG_SYSTEM@
mauveMpatrol_SOURCES = mauveAligner.cpp
mauveMpatrol_LDFLAGS = -lmpatrol -lbfd -liberty $(LIBRARY_CL) `wx-config --libs`
EXTRA_mauveMpatrol_SOURCES = getopt.c getopt.h getopt1.c
mauveMpatrol_DEPENDENCIES = @GETOPT_LONG_SYSTEM@
mauveEfence_SOURCES = mauveAligner.cpp
mauveEfence_LDADD = -lefence $(DEPS_LIBS)
EXTRA_mauveEfence_SOURCES = getopt.c getopt.h getopt1.c
mauveEfence_DEPENDENCIES = @GETOPT_LONG_SYSTEM@
mauveStatic_SOURCES = mauveAligner.cpp
mauveStatic_LDADD = $(LIBRARY_CL)
EXTRA_mauveStatic_SOURCES = getopt.c getopt.h getopt1.c
mauveStatic_DEPENDENCIES = @GETOPT_LONG_SYSTEM@

#mauveAligner4_SOURCES = mauveAligner.cpp
#mauveAligner4_LDADD = $(LIBRARY_CL)
#mauveAligner4_CXXFLAGS = MAX_SEQ_COUNT=4
#EXTRA_mauveAligner4_SOURCES = getopt.c getopt.h getopt1.c
#mauveAligner4_DEPENDENCIES = @GETOPT_LONG_SYSTEM@
calculateCoverage_SOURCES = calculateCoverage.cpp
calculateCoverage_LDADD = $(LIBRARY_CL)
EXTRA_calculateCoverage_SOURCES = getopt.c getopt.h getopt1.c
calculateCoverage_DEPENDENCIES = @GETOPT_LONG_SYSTEM@
scoreAlignment_SOURCES = scoreAlignment.cpp
scoreAlignment_LDADD = $(LIBRARY_CL)
EXTRA_scoreAlignment_SOURCES = getopt.c getopt.h getopt1.c
scoreAlignment_DEPENDENCIES = @GETOPT_LONG_SYSTEM@
extractBackbone_SOURCES = extractBackbone.cpp
extractBackbone_LDADD = $(LIBRARY_CL)
EXTRA_extractBackbone_SOURCES = getopt.c getopt.h getopt1.c
extractBackbone_DEPENDENCIES = @GETOPT_LONG_SYSTEM@
toRawSequence_SOURCES = toRawSequence.cpp
toRawSequence_LDADD = $(LIBRARY_CL)
EXTRA_toRawSequence_SOURCES = getopt.c getopt.h getopt1.c
toRawSequence_DEPENDENCIES = @GETOPT_LONG_SYSTEM@
transposeCoordinates_SOURCES = transposeCoordinates.cpp
transposeCoordinates_LDADD = $(LIBRARY_CL)
EXTRA_transposeCoordinates_SOURCES = getopt.c getopt.h getopt1.c
transposeCoordinates_DEPENDENCIES = @GETOPT_LONG_SYSTEM@
uniqueMerCount_SOURCES = uniqueMerCount.cpp
uniqueMerCount_LDADD = $(LIBRARY_CL)
EXTRA_uniqueMerCount_SOURCES = getopt.c getopt.h getopt1.c
uniqueMerCount_DEPENDENCIES = @GETOPT_LONG_SYSTEM@
calculateBackboneCoverage_SOURCES = calculateBackboneCoverage.cpp
calculateBackboneCoverage_LDADD = $(LIBRARY_CL)
EXTRA_calculateBackboneCoverage_SOURCES = getopt.c getopt.h getopt1.c
calculateBackboneCoverage_DEPENDENCIES = @GETOPT_LONG_SYSTEM@
mfa2xmfa_SOURCES = mfa2xmfa.cpp
mfa2xmfa_LDADD = $(LIBRARY_CL)
EXTRA_mfa2xmfa_SOURCES = getopt.c getopt.h getopt1.c
mfa2xmfa_DEPENDENCIES = @GETOPT_LONG_SYSTEM@
xmfa2maf_SOURCES = xmfa2maf.cpp
xmfa2maf_LDADD = $(LIBRARY_CL)
EXTRA_xmfa2maf_SOURCES = getopt.c getopt.h getopt1.c
xmfa2maf_DEPENDENCIES = @GETOPT_LONG_SYSTEM@
toGBKsequence_SOURCES = toGBKsequence.cpp
toGBKsequence_LDADD = $(LIBRARY_CL)
EXTRA_toGBKsequence_SOURCES = getopt.c getopt.h getopt1.c
toGBKsequence_DEPENDENCIES = @GETOPT_LONG_SYSTEM@
multiToRawSequence_SOURCES = multiToRawSequence.cpp
multiToRawSequence_LDADD = $(LIBRARY_CL)
EXTRA_multiToRawSequence_SOURCES = getopt.c getopt.h getopt1.c
multiToRawSequence_DEPENDENCIES = @GETOPT_LONG_SYSTEM@
unalign_SOURCES = unalign.cpp
unalign_LDADD = $(LIBRARY_CL)
EXTRA_unalign_SOURCES = getopt.c getopt.h getopt1.c
unalign_DEPENDENCIES = @GETOPT_LONG_SYSTEM@
addUnalignedIntervals_SOURCES = addUnalignedIntervals.cpp
addUnalignedIntervals_LDADD = $(LIBRARY_CL)
toMultiFastA_SOURCES = toMultiFastA.cpp
toMultiFastA_LDADD = $(LIBRARY_CL)
getAlignmentWindows_SOURCES = getAlignmentWindows.cpp
getAlignmentWindows_LDADD = $(LIBRARY_CL)
extractBackbone2_SOURCES = extractBackbone2.cpp
extractBackbone2_LDADD = $(LIBRARY_CL)
uniquifyTrees_SOURCES = uniquifyTrees.cpp
uniquifyTrees_LDADD = $(LIBRARY_CL)
countInPlaceInversions_SOURCES = countInPlaceInversions.cpp
countInPlaceInversions_LDADD = $(LIBRARY_CL)
toGrimmFormat_SOURCES = toGrimmFormat.cpp
toGrimmFormat_LDADD = $(LIBRARY_CL)
joinAlignmentFiles_SOURCES = joinAlignmentFiles.cpp
joinAlignmentFiles_LDADD = $(LIBRARY_CL)
mauveToXMFA_SOURCES = mauveToXMFA.cpp
mauveToXMFA_LDADD = $(LIBRARY_CL)
stripGapColumns_SOURCES = stripGapColumns.cpp
stripGapColumns_LDADD = $(LIBRARY_CL)
gappiness_SOURCES = gappiness.cpp
gappiness_LDADD = $(LIBRARY_CL)
progressiveMauve_SOURCES = progressiveMauve.cpp UniqueMatchFinder.h UniqueMatchFinder.cpp 
progressiveMauve_LDFLAGS = 
progressiveMauve_LDADD = $(LIBRARY_CL)
progressiveMauveStatic_SOURCES = progressiveMauve.cpp UniqueMatchFinder.h UniqueMatchFinder.cpp 
progressiveMauveStatic_LDADD = $(LIBRARY_CL)
sortContigs_SOURCES = sortContigs.cpp
sortContigs_LDADD = $(LIBRARY_CL)
extractBCITrees_SOURCES = extractBCITrees.cpp
extractBCITrees_LDADD = $(LIBRARY_CL)
calculateBackboneCoverage2_SOURCES = calculateBackboneCoverage2.cpp
calculateBackboneCoverage2_LDADD = $(LIBRARY_CL)
createBackboneMFA_SOURCES = createBackboneMFA.cpp
createBackboneMFA_LDADD = $(LIBRARY_CL)
pairCompare_SOURCES = pairCompare.cpp
pairCompare_LDADD = $(LIBRARY_CL)
repeatoire_SOURCES = repeatoire.cpp MatchRecord.h SeedMatchEnumerator.h
repeatoire_LDADD = $(LIBRARY_CL) 
scoreALU_SOURCES = scoreALU.cpp
scoreALU_LDADD = $(LIBRARY_CL) 
evd_SOURCES = evd.cpp
evd_LDADD = $(LIBRARY_CL)
alignmentProjector_SOURCES = alignmentProjector.cpp
alignmentProjector_LDADD = $(LIBRARY_CL)
stripSubsetLCBs_SOURCES = stripSubsetLCBs.cpp
stripSubsetLCBs_LDADD = $(LIBRARY_CL)
projectAndStrip_SOURCES = projectAndStrip.cpp
projectAndStrip_LDADD = $(LIBRARY_CL)
makeBadgerMatrix_SOURCES = makeBadgerMatrix.cpp
makeBadgerMatrix_LDADD = $(LIBRARY_CL)
multiEVD_SOURCES = multiEVD.cpp
multiEVD_LDADD = $(LIBRARY_CL)
randomGeneSample_SOURCES = randomGeneSample.cpp
randomGeneSample_LDADD = $(LIBRARY_CL)
getOrthologList_SOURCES = getOrthologList.cpp
getOrthologList_LDADD = $(LIBRARY_CL)
bbFilter_SOURCES = bbFilter.cpp
bbFilter_LDADD = $(LIBRARY_CL)
bbAnalyze_SOURCES = bbAnalyze.cpp
bbAnalyze_LDADD = $(LIBRARY_CL)
makeMc4Matrix_SOURCES = makeMc4Matrix.cpp
makeMc4Matrix_LDADD = $(LIBRARY_CL)
bbBreakOnGenes_SOURCES = bbBreakOnGenes.cpp
bbBreakOnGenes_LDADD = $(LIBRARY_CL)
backbone_global_to_local_SOURCES = backbone_global_to_local.cpp
backbone_global_to_local_LDADD = $(LIBRARY_CL)
coordinateTranslate_SOURCES = coordinateTranslate.cpp
coordinateTranslate_LDADD = $(LIBRARY_CL)
all: config.h
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .c .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

config.h: stamp-h1
	@test -f $@ || rm -f stamp-h1
	@test -f $@ || $(MAKE) $(AM_MAKEFLAGS) stamp-h1

stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status src/config.h
$(srcdir)/config.h.in:  $(am__configure_deps) 
	($(am__cd) $(top_srcdir) && $(AUTOHEADER))
	rm -f stamp-h1
	touch $@

distclean-hdr:
	-rm -f config.h stamp-h1
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

addUnalignedIntervals$(EXEEXT): $(addUnalignedIntervals_OBJECTS) $(addUnalignedIntervals_DEPENDENCIES) $(EXTRA_addUnalignedIntervals_DEPENDENCIES) 
	@rm -f addUnalignedIntervals$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(addUnalignedIntervals_OBJECTS) $(addUnalignedIntervals_LDADD) $(LIBS)

alignmentProjector$(EXEEXT): $(alignmentProjector_OBJECTS) $(alignmentProjector_DEPENDENCIES) $(EXTRA_alignmentProjector_DEPENDENCIES) 
	@rm -f alignmentProjector$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(alignmentProjector_OBJECTS) $(alignmentProjector_LDADD) $(LIBS)

backbone_global_to_local$(EXEEXT): $(backbone_global_to_local_OBJECTS) $(backbone_global_to_local_DEPENDENCIES) $(EXTRA_backbone_global_to_local_DEPENDENCIES) 
	@rm -f backbone_global_to_local$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(backbone_global_to_local_OBJECTS) $(backbone_global_to_local_LDADD) $(LIBS)

bbAnalyze$(EXEEXT): $(bbAnalyze_OBJECTS) $(bbAnalyze_DEPENDENCIES) $(EXTRA_bbAnalyze_DEPENDENCIES) 
	@rm -f bbAnalyze$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(bbAnalyze_OBJECTS) $(bbAnalyze_LDADD) $(LIBS)

bbBreakOnGenes$(EXEEXT): $(bbBreakOnGenes_OBJECTS) $(bbBreakOnGenes_DEPENDENCIES) $(EXTRA_bbBreakOnGenes_DEPENDENCIES) 
	@rm -f bbBreakOnGenes$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(bbBreakOnGenes_OBJECTS) $(bbBreakOnGenes_LDADD) $(LIBS)

bbFilter$(EXEEXT): $(bbFilter_OBJECTS) $(bbFilter_DEPENDENCIES) $(EXTRA_bbFilter_DEPENDENCIES) 
	@rm -f bbFilter$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(bbFilter_OBJECTS) $(bbFilter_LDADD) $(LIBS)

calculateBackboneCoverage$(EXEEXT): $(calculateBackboneCoverage_OBJECTS) $(calculateBackboneCoverage_DEPENDENCIES) $(EXTRA_calculateBackboneCoverage_DEPENDENCIES) 
	@rm -f calculateBackboneCoverage$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(calculateBackboneCoverage_OBJECTS) $(calculateBackboneCoverage_LDADD) $(LIBS)

calculateBackboneCoverage2$(EXEEXT): $(calculateBackboneCoverage2_OBJECTS) $(calculateBackboneCoverage2_DEPENDENCIES) $(EXTRA_calculateBackboneCoverage2_DEPENDENCIES) 
	@rm -f calculateBackboneCoverage2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(calculateBackboneCoverage2_OBJECTS) $(calculateBackboneCoverage2_LDADD) $(LIBS)

calculateCoverage$(EXEEXT): $(calculateCoverage_OBJECTS) $(calculateCoverage_DEPENDENCIES) $(EXTRA_calculateCoverage_DEPENDENCIES) 
	@rm -f calculateCoverage$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(calculateCoverage_OBJECTS) $(calculateCoverage_LDADD) $(LIBS)

coordinateTranslate$(EXEEXT): $(coordinateTranslate_OBJECTS) $(coordinateTranslate_DEPENDENCIES) $(EXTRA_coordinateTranslate_DEPENDENCIES) 
	@rm -f coordinateTranslate$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(coordinateTranslate_OBJECTS) $(coordinateTranslate_LDADD) $(LIBS)

countInPlaceInversions$(EXEEXT): $(countInPlaceInversions_OBJECTS) $(countInPlaceInversions_DEPENDENCIES) $(EXTRA_countInPlaceInversions_DEPENDENCIES) 
	@rm -f countInPlaceInversions$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(countInPlaceInversions_OBJECTS) $(countInPlaceInversions_LDADD) $(LIBS)

createBackboneMFA$(EXEEXT): $(createBackboneMFA_OBJECTS) $(createBackboneMFA_DEPENDENCIES) $(EXTRA_createBackboneMFA_DEPENDENCIES) 
	@rm -f createBackboneMFA$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(createBackboneMFA_OBJECTS) $(createBackboneMFA_LDADD) $(LIBS)

evd$(EXEEXT): $(evd_OBJECTS) $(evd_DEPENDENCIES) $(EXTRA_evd_DEPENDENCIES) 
	@rm -f evd$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(evd_OBJECTS) $(evd_LDADD) $(LIBS)

extractBCITrees$(EXEEXT): $(extractBCITrees_OBJECTS) $(extractBCITrees_DEPENDENCIES) $(EXTRA_extractBCITrees_DEPENDENCIES) 
	@rm -f extractBCITrees$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(extractBCITrees_OBJECTS) $(extractBCITrees_LDADD) $(LIBS)

extractBackbone$(EXEEXT): $(extractBackbone_OBJECTS) $(extractBackbone_DEPENDENCIES) $(EXTRA_extractBackbone_DEPENDENCIES) 
	@rm -f extractBackbone$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(extractBackbone_OBJECTS) $(extractBackbone_LDADD) $(LIBS)

extractBackbone2$(EXEEXT): $(extractBackbone2_OBJECTS) $(extractBackbone2_DEPENDENCIES) $(EXTRA_extractBackbone2_DEPENDENCIES) 
	@rm -f extractBackbone2$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(extractBackbone2_OBJECTS) $(extractBackbone2_LDADD) $(LIBS)

gappiness$(EXEEXT): $(gappiness_OBJECTS) $(gappiness_DEPENDENCIES) $(EXTRA_gappiness_DEPENDENCIES) 
	@rm -f gappiness$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(gappiness_OBJECTS) $(gappiness_LDADD) $(LIBS)

getAlignmentWindows$(EXEEXT): $(getAlignmentWindows_OBJECTS) $(getAlignmentWindows_DEPENDENCIES) $(EXTRA_getAlignmentWindows_DEPENDENCIES) 
	@rm -f getAlignmentWindows$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(getAlignmentWindows_OBJECTS) $(getAlignmentWindows_LDADD) $(LIBS)

getOrthologList$(EXEEXT): $(getOrthologList_OBJECTS) $(getOrthologList_DEPENDENCIES) $(EXTRA_getOrthologList_DEPENDENCIES) 
	@rm -f getOrthologList$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(getOrthologList_OBJECTS) $(getOrthologList_LDADD) $(LIBS)

joinAlignmentFiles$(EXEEXT): $(joinAlignmentFiles_OBJECTS) $(joinAlignmentFiles_DEPENDENCIES) $(EXTRA_joinAlignmentFiles_DEPENDENCIES) 
	@rm -f joinAlignmentFiles$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(joinAlignmentFiles_OBJECTS) $(joinAlignmentFiles_LDADD) $(LIBS)

makeBadgerMatrix$(EXEEXT): $(makeBadgerMatrix_OBJECTS) $(makeBadgerMatrix_DEPENDENCIES) $(EXTRA_makeBadgerMatrix_DEPENDENCIES) 
	@rm -f makeBadgerMatrix$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(makeBadgerMatrix_OBJECTS) $(makeBadgerMatrix_LDADD) $(LIBS)

makeMc4Matrix$(EXEEXT): $(makeMc4Matrix_OBJECTS) $(makeMc4Matrix_DEPENDENCIES) $(EXTRA_makeMc4Matrix_DEPENDENCIES) 
	@rm -f makeMc4Matrix$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(makeMc4Matrix_OBJECTS) $(makeMc4Matrix_LDADD) $(LIBS)

mauveAligner$(EXEEXT): $(mauveAligner_OBJECTS) $(mauveAligner_DEPENDENCIES) $(EXTRA_mauveAligner_DEPENDENCIES) 
	@rm -f mauveAligner$(EXEEXT)
	$(AM_V_CXXLD)$(mauveAligner_LINK) $(mauveAligner_OBJECTS) $(mauveAligner_LDADD) $(LIBS)

mauveEfence$(EXEEXT): $(mauveEfence_OBJECTS) $(mauveEfence_DEPENDENCIES) $(EXTRA_mauveEfence_DEPENDENCIES) 
	@rm -f mauveEfence$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(mauveEfence_OBJECTS) $(mauveEfence_LDADD) $(LIBS)

mauveMpatrol$(EXEEXT): $(mauveMpatrol_OBJECTS) $(mauveMpatrol_DEPENDENCIES) $(EXTRA_mauveMpatrol_DEPENDENCIES) 
	@rm -f mauveMpatrol$(EXEEXT)
	$(AM_V_CXXLD)$(mauveMpatrol_LINK) $(mauveMpatrol_OBJECTS) $(mauveMpatrol_LDADD) $(LIBS)

mauveStatic$(EXEEXT): $(mauveStatic_OBJECTS) $(mauveStatic_DEPENDENCIES) $(EXTRA_mauveStatic_DEPENDENCIES) 
	@rm -f mauveStatic$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(mauveStatic_OBJECTS) $(mauveStatic_LDADD) $(LIBS)

mauveToXMFA$(EXEEXT): $(mauveToXMFA_OBJECTS) $(mauveToXMFA_DEPENDENCIES) $(EXTRA_mauveToXMFA_DEPENDENCIES) 
	@rm -f mauveToXMFA$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(mauveToXMFA_OBJECTS) $(mauveToXMFA_LDADD) $(LIBS)

mfa2xmfa$(EXEEXT): $(mfa2xmfa_OBJECTS) $(mfa2xmfa_DEPENDENCIES) $(EXTRA_mfa2xmfa_DEPENDENCIES) 
	@rm -f mfa2xmfa$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(mfa2xmfa_OBJECTS) $(mfa2xmfa_LDADD) $(LIBS)

multiEVD$(EXEEXT): $(multiEVD_OBJECTS) $(multiEVD_DEPENDENCIES) $(EXTRA_multiEVD_DEPENDENCIES) 
	@rm -f multiEVD$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(multiEVD_OBJECTS) $(multiEVD_LDADD) $(LIBS)

multiToRawSequence$(EXEEXT): $(multiToRawSequence_OBJECTS) $(multiToRawSequence_DEPENDENCIES) $(EXTRA_multiToRawSequence_DEPENDENCIES) 
	@rm -f multiToRawSequence$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(multiToRawSequence_OBJECTS) $(multiToRawSequence_LDADD) $(LIBS)

pairCompare$(EXEEXT): $(pairCompare_OBJECTS) $(pairCompare_DEPENDENCIES) $(EXTRA_pairCompare_DEPENDENCIES) 
	@rm -f pairCompare$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(pairCompare_OBJECTS) $(pairCompare_LDADD) $(LIBS)

progressiveMauve$(EXEEXT): $(progressiveMauve_OBJECTS) $(progressiveMauve_DEPENDENCIES) $(EXTRA_progressiveMauve_DEPENDENCIES) 
	@rm -f progressiveMauve$(EXEEXT)
	$(AM_V_CXXLD)$(progressiveMauve_LINK) $(progressiveMauve_OBJECTS) $(progressiveMauve_LDADD) $(LIBS)

progressiveMauveStatic$(EXEEXT): $(progressiveMauveStatic_OBJECTS) $(progressiveMauveStatic_DEPENDENCIES) $(EXTRA_progressiveMauveStatic_DEPENDENCIES) 
	@rm -f progressiveMauveStatic$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(progressiveMauveStatic_OBJECTS) $(progressiveMauveStatic_LDADD) $(LIBS)

projectAndStrip$(EXEEXT): $(projectAndStrip_OBJECTS) $(projectAndStrip_DEPENDENCIES) $(EXTRA_projectAndStrip_DEPENDENCIES) 
	@rm -f projectAndStrip$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(projectAndStrip_OBJECTS) $(projectAndStrip_LDADD) $(LIBS)

randomGeneSample$(EXEEXT): $(randomGeneSample_OBJECTS) $(randomGeneSample_DEPENDENCIES) $(EXTRA_randomGeneSample_DEPENDENCIES) 
	@rm -f randomGeneSample$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(randomGeneSample_OBJECTS) $(randomGeneSample_LDADD) $(LIBS)

repeatoire$(EXEEXT): $(repeatoire_OBJECTS) $(repeatoire_DEPENDENCIES) $(EXTRA_repeatoire_DEPENDENCIES) 
	@rm -f repeatoire$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(repeatoire_OBJECTS) $(repeatoire_LDADD) $(LIBS)

scoreALU$(EXEEXT): $(scoreALU_OBJECTS) $(scoreALU_DEPENDENCIES) $(EXTRA_scoreALU_DEPENDENCIES) 
	@rm -f scoreALU$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(scoreALU_OBJECTS) $(scoreALU_LDADD) $(LIBS)

scoreAlignment$(EXEEXT): $(scoreAlignment_OBJECTS) $(scoreAlignment_DEPENDENCIES) $(EXTRA_scoreAlignment_DEPENDENCIES) 
	@rm -f scoreAlignment$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(scoreAlignment_OBJECTS) $(scoreAlignment_LDADD) $(LIBS)

sortContigs$(EXEEXT): $(sortContigs_OBJECTS) $(sortContigs_DEPENDENCIES) $(EXTRA_sortContigs_DEPENDENCIES) 
	@rm -f sortContigs$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(sortContigs_OBJECTS) $(sortContigs_LDADD) $(LIBS)

stripGapColumns$(EXEEXT): $(stripGapColumns_OBJECTS) $(stripGapColumns_DEPENDENCIES) $(EXTRA_stripGapColumns_DEPENDENCIES) 
	@rm -f stripGapColumns$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(stripGapColumns_OBJECTS) $(stripGapColumns_LDADD) $(LIBS)

stripSubsetLCBs$(EXEEXT): $(stripSubsetLCBs_OBJECTS) $(stripSubsetLCBs_DEPENDENCIES) $(EXTRA_stripSubsetLCBs_DEPENDENCIES) 
	@rm -f stripSubsetLCBs$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(stripSubsetLCBs_OBJECTS) $(stripSubsetLCBs_LDADD) $(LIBS)

toGBKsequence$(EXEEXT): $(toGBKsequence_OBJECTS) $(toGBKsequence_DEPENDENCIES) $(EXTRA_toGBKsequence_DEPENDENCIES) 
	@rm -f toGBKsequence$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(toGBKsequence_OBJECTS) $(toGBKsequence_LDADD) $(LIBS)

toGrimmFormat$(EXEEXT): $(toGrimmFormat_OBJECTS) $(toGrimmFormat_DEPENDENCIES) $(EXTRA_toGrimmFormat_DEPENDENCIES) 
	@rm -f toGrimmFormat$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(toGrimmFormat_OBJECTS) $(toGrimmFormat_LDADD) $(LIBS)

toMultiFastA$(EXEEXT): $(toMultiFastA_OBJECTS) $(toMultiFastA_DEPENDENCIES) $(EXTRA_toMultiFastA_DEPENDENCIES) 
	@rm -f toMultiFastA$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(toMultiFastA_OBJECTS) $(toMultiFastA_LDADD) $(LIBS)

toRawSequence$(EXEEXT): $(toRawSequence_OBJECTS) $(toRawSequence_DEPENDENCIES) $(EXTRA_toRawSequence_DEPENDENCIES) 
	@rm -f toRawSequence$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(toRawSequence_OBJECTS) $(toRawSequence_LDADD) $(LIBS)

transposeCoordinates$(EXEEXT): $(transposeCoordinates_OBJECTS) $(transposeCoordinates_DEPENDENCIES) $(EXTRA_transposeCoordinates_DEPENDENCIES) 
	@rm -f transposeCoordinates$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(transposeCoordinates_OBJECTS) $(transposeCoordinates_LDADD) $(LIBS)

unalign$(EXEEXT): $(unalign_OBJECTS) $(unalign_DEPENDENCIES) $(EXTRA_unalign_DEPENDENCIES) 
	@rm -f unalign$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(unalign_OBJECTS) $(unalign_LDADD) $(LIBS)

uniqueMerCount$(EXEEXT): $(uniqueMerCount_OBJECTS) $(uniqueMerCount_DEPENDENCIES) $(EXTRA_uniqueMerCount_DEPENDENCIES) 
	@rm -f uniqueMerCount$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(uniqueMerCount_OBJECTS) $(uniqueMerCount_LDADD) $(LIBS)

uniquifyTrees$(EXEEXT): $(uniquifyTrees_OBJECTS) $(uniquifyTrees_DEPENDENCIES) $(EXTRA_uniquifyTrees_DEPENDENCIES) 
	@rm -f uniquifyTrees$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(uniquifyTrees_OBJECTS) $(uniquifyTrees_LDADD) $(LIBS)

xmfa2maf$(EXEEXT): $(xmfa2maf_OBJECTS) $(xmfa2maf_DEPENDENCIES) $(EXTRA_xmfa2maf_DEPENDENCIES) 
	@rm -f xmfa2maf$(EXEEXT)
	$(AM_V_CXXLD)$(CXXLINK) $(xmfa2maf_OBJECTS) $(xmfa2maf_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/UniqueMatchFinder.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/addUnalignedIntervals.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/alignmentProjector.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/backbone_global_to_local.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bbAnalyze.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bbBreakOnGenes.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/bbFilter.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/calculateBackboneCoverage.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/calculateBackboneCoverage2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/calculateCoverage.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/coordinateTranslate.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/countInPlaceInversions.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/createBackboneMFA.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/evd.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/extractBCITrees.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/extractBackbone.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/extractBackbone2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/gappiness.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/getAlignmentWindows.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/getOrthologList.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/getopt.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/getopt1.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/joinAlignmentFiles.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/makeBadgerMatrix.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/makeMc4Matrix.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mauveAligner.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mauveToXMFA.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mfa2xmfa.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/multiEVD.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/multiToRawSequence.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pairCompare.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/progressiveMauve.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/projectAndStrip.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/randomGeneSample.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/repeatoire.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scoreALU.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/scoreAlignment.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sortContigs.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/stripGapColumns.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/stripSubsetLCBs.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/toGBKsequence.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/toGrimmFormat.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/toMultiFastA.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/toRawSequence.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/transposeCoordinates.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/unalign.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/uniqueMerCount.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/uniquifyTrees.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xmfa2maf.Po@am__quote@

.c.o:
@am__fastdepCC_TRUE@	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ $<

.c.obj:
@am__fastdepCC_TRUE@	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCC_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.o:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCXX_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
@am__fastdepCXX_TRUE@	$(AM_V_CXX)$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCXX_TRUE@	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	$(AM_V_CXX)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(AM_V_CXX@am__nodep@)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS) config.h
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-hdr distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: all install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean \
	clean-binPROGRAMS clean-generic cscopelist-am ctags ctags-am \
	distclean distclean-compile distclean-generic distclean-hdr \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-binPROGRAMS install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags tags-am uninstall \
	uninstall-am uninstall-binPROGRAMS


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
