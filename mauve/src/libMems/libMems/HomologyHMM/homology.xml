<?xml version="1.0"?>
<!--
			Derived from casino.xml by Aaron Darling 
			Copyright (C) 2007 Aaron Darling

      This file is part of HMMoC 0.5, a hidden Markov model compiler.
      Copyright (C) 2006 by Gerton Lunter, Oxford University.
  
      HMMoC is free software; you can redistribute it and/or modify
      it under the terms of the GNU General Public License as published by
      the Free Software Foundation; either version 2 of the License, or
      (at your option) any later version.
  
      HMMOC is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.
  
      You should have received a copy of the GNU General Public License
      along with HMMoC; if not, write to the Free Software
      Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->



<hml debug="true">



<author>Aaron Darling</author>


<!--  We code a site pattern as a number  
 1 A:A, T:T
 2 A:C, C:A, G:T, T:G
 3 A:G, G:A, C:T, T:C
 4 A:T, T:A
 5 C:C, G:G
 6 C:G, G:C
 7 N:gap open/close
 8 N:gap extend
-->
<alphabet id="sitepatterns">
 12345678
</alphabet>



<output id="sequence">
  <alphabet idref="sitepatterns"/>
  <identifier type="length" value="iLen"/>
  <identifier type="sequence" value="aSeq"/>
  <code type="parameter" value="char *aSeq"/>
  <code type="parameter" value="int iLen"/>
</output>


<hmm id="Homology">

 <description>  An HMM to distinguish homologous from unrelated sites in an alignment </description>

 <outputs id="homologyoutputs">
  <output idref="sequence"/>
 </outputs>


 <clique id="block1">
  <state id="start"/>
 </clique>

 <clique id="block2">
  <state id="homologous"/>
  <state id="unrelated"/>
 </clique>

 <clique id="block3">
  <state id="end"/>
 </clique>


 <graph>
  <clique idref="block1"/>
  <clique idref="block2"/>
  <clique idref="block3"/>
 </graph>


 <transitions>
  <transition from="start" to="homologous" probability="startHomologous" emission="emitHomologous"/>
  <transition from="start" to="unrelated" probability="startUnrelated" emission="emitUnrelated"/>
  <transition from="homologous" to="homologous" probability="stayHomologous" emission="emitHomologous"/>
  <transition from="homologous" to="unrelated" probability="goUnrelated" emission="emitUnrelated"/>
  <transition from="unrelated" to="unrelated" probability="stayUnrelated" emission="emitUnrelated"/>
  <transition from="unrelated" to="homologous" probability="goHomologous" emission="emitHomologous"/>
  <transition from="homologous" to="end" probability="goStopFromHomologous" emission="empty"/>
  <transition from="unrelated" to="end" probability="goStopFromUnrelated" emission="empty"/>
 </transitions>


 <code id="paramsClassDef" where="classdefinitions">
   <![CDATA[
     struct Params {
       double iStartHomologous;
       double iGoHomologous;
       double iGoUnrelated;
       double iGoStopFromUnrelated;
       double iGoStopFromHomologous;
       double aEmitHomologous[8];
       double aEmitUnrelated[8];
     };
   ]]>
  </code>


  <emission id="empty">
   <probability>
    <code type="expression"> 1.0 </code>
   </probability>
  </emission>


  <emission id="emitHomologous">
   <output idref="sequence"/>
   <probability>
    <code type="statement">
     <identifier output="sequence" value="iEmission"/>
     <identifier type="result" value="iProb"/>
     <![CDATA[
  
       iProb = iPar.aEmitHomologous[ iEmission - '1' ];

     ]]>
    </code>
   </probability>
  </emission>


  <emission id="emitUnrelated">
   <output idref="sequence"/>
   <probability>
    <code type="statement">
     <identifier output="sequence" value="iEmission"/>
     <identifier type="result" value="iProb"/>
     <!--  Here goes the code computing the probability -->
     <![CDATA[
  
       iProb = iPar.aEmitUnrelated[ iEmission - '1' ];

     ]]>
    </code>
   </probability>
  </emission>


  <probability id="one"><code> 1.0 </code></probability>


  <probability id="goUnrelated">
    <code>
      <!--  Tell HMMoC that this code requires an input parameter, which itself need a definition to make sense -->
      <code type="parameter" init="paramsClassDef" value="Params iPar"/>
      <!-- The actual code for this probability follows (no need to quote this) -->

        iPar.iGoUnrelated 

    </code>
  </probability>

  <probability id="startHomologous"><code> iPar.iStartHomologous </code></probability>
  <probability id="startUnrelated"><code> 1.0 - iPar.iStartHomologous </code></probability>
  <probability id="goHomologous"><code> iPar.iGoHomologous </code></probability>
  <probability id="goStopFromHomologous"><code> iPar.iGoStopFromHomologous </code></probability>
  <probability id="goStopFromUnrelated"><code> iPar.iGoStopFromUnrelated </code></probability>
  <probability id="stayHomologous"><code> 1.0 - iPar.iGoUnrelated - iPar.iGoStopFromHomologous </code></probability>
  <probability id="stayUnrelated"><code> 1.0 - iPar.iGoHomologous - iPar.iGoStopFromUnrelated </code></probability>

</hmm>








<!-- Code generation -->


<forward  outputTable="yes" name="Forward" id="fw">
  <!-- Specify HMM to make code for -->
  <hmm idref="Homology"/>
</forward>

<backward  outputTable="yes" baumWelch="yes" name="Backward" id="bw">
  <!-- Specify HMM to make code for -->
  <hmm idref="Homology"/>
</backward>

<viterbi  name="Viterbi" id="vit">
  <hmm idref="Homology"/>
</viterbi>



<codeGeneration realtype="bfloat" file="homology.cc" header="homology.h" language="C++">

  <forward idref="fw"/>
  <backward idref="bw"/>
  <viterbi idref="vit"/>

</codeGeneration>


 
</hml>


